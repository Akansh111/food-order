{"version":3,"sources":["BurgerMenu/ColumnDefinition.js","OrderSummary/OrderSummary.jsx","shared/Constants.js","BurgerMenu/BurgerMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["colDefs","headerName","field","filter","sortable","filterParams","suppressMenu","suppressMiniFilter","headerCheckboxSelection","headerCheckboxSelectionFilteredOnly","checkboxSelection","width","OrderSummary","props","summaryData","React","useState","show","setShow","total","summaryJsx","map","item","index","finalPrice","price","discount","toFixed","key","burgerName","handleClose","window","location","reload","className","length","Button","variant","size","block","onClick","disabled","Modal","onHide","Header","closeButton","Title","Body","Footer","BurgerMenu","foodData","setFoodData","setSummaryData","useEffect","a","axios","result","data","fetchData","columnDefs","rowData","floatingFilter","rowSelection","onSelectionChanged","params","selectedRows","api","getSelectedRows","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e859593.chunk.js","sourcesContent":["\r\nexport const colDefs = [\r\n    { \r\n        headerName: \"Burger Name\",\r\n        field: \"burgerName\",\r\n        filter: true,\r\n        sortable: true,\r\n        filterParams: { suppressMenu: true, suppressMiniFilter: true, filter: false  },\r\n        headerCheckboxSelection: true,\r\n          headerCheckboxSelectionFilteredOnly: true,\r\n          checkboxSelection: true,\r\n    },\r\n    {\r\n        headerName: \"Category\", \r\n        field: \"category\" ,\r\n        filter: true,\r\n        sortable: true,\r\n        width: 150,\r\n        filterParams: { suppressMiniFilter: true }\r\n\r\n    },\r\n    { \r\n        headerName: \"Rating\", \r\n        field: \"rating\", \r\n        filter: true,\r\n        sortable: true,\r\n        width: 120,\r\n        filterParams: { suppressMiniFilter: true }\r\n\r\n    },\r\n    { \r\n        headerName: \"Price (₹)\", \r\n        field: \"price\", \r\n        filter: true,\r\n        sortable: true,\r\n        width: 120,\r\n        filterParams: { suppressMiniFilter: true }\r\n\r\n    },\r\n    { \r\n        headerName: \"Discount (%)\", \r\n        field: \"discount\", \r\n        filter: true,\r\n        sortable: true,\r\n        width: 120,\r\n        filterParams: { suppressMiniFilter: true }\r\n\r\n    }\r\n];","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { menuMessage, successMessage, discountMessage, orderSummaryTitle } from '../shared';\r\nimport './OrderSummary.css';\r\n\r\nexport const OrderSummary = (props) => {\r\n    const { summaryData } = props;\r\n    const [show, setShow] = React.useState(false);\r\n    let total = 0.00;\r\n    let summaryJsx = summaryData && summaryData.map((item, index) => {\r\n        const finalPrice = (item.price * (1 - item.discount/100)).toFixed(2);\r\n        total = total + (item.price * (1 - item.discount/100));\r\n        return (\r\n            <tr key={index}>\r\n                <td>\r\n                    {item.burgerName} - {'₹' + item.price}\r\n                </td>\r\n                <td>{' = '}</td>\r\n                <td>\r\n                    <b>\r\n                        {`₹ ${finalPrice} (${discountMessage})`}\r\n                    </b>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        window.location.reload();\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <div className=\"order-summary\">\r\n            <div className=\"card-title\">\r\n                {orderSummaryTitle}\r\n            </div>\r\n            <br />\r\n            <div className=\"summary-table\">\r\n                <table className=\"table table-striped\">\r\n                    <tbody>\r\n                        {summaryJsx.length ? summaryJsx : <div>{menuMessage}</div>}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"cart-total\">\r\n                {'Total: ₹' + total.toFixed(2)}\r\n            </div>\r\n            <Button variant=\"primary\" size=\"lg\" block onClick={handleShow} disabled={total === 0}>\r\n                Confirm Order\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>CONGRATULATIONS</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{successMessage}</Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","export const url = 'https://demo8151081.mockable.io/getFoodData';\r\nexport const mainTitle = 'Lets BANG ON to your Favourite Burger';\r\nexport const orderNowTitle = 'ORDER NOW!!!';\r\nexport const menuMessage = 'Select the items from the Menu!';\r\nexport const successMessage = 'Wohoo, Your order will be delivered in 30 minutes!';\r\nexport const discountMessage = 'after applying discount';\r\nexport const orderSummaryTitle = 'ORDER SUMMARY';","import React from 'react';\r\nimport axios from 'axios';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { colDefs } from './ColumnDefinition';\r\nimport { OrderSummary } from '../OrderSummary';\r\nimport { url } from '../shared';\r\n\r\nimport './BurgerMenu.css';\r\n\r\nexport const BurgerMenu = () => {\r\n    \r\n    const [foodData, setFoodData] = React.useState([]);\r\n    const [summaryData, setSummaryData] = React.useState([]);\r\n    React.useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(url);\r\n            setFoodData(result.data);\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    const onSelectionChanged = (params) => {\r\n        const selectedRows = params.api.getSelectedRows();\r\n        setSummaryData(selectedRows);\r\n    };\r\n    \r\n    return (\r\n        <div className=\"food-menu ag-theme-balham\"> \r\n            <div className=\"ag-grid\">\r\n                <AgGridReact\r\n                    columnDefs={colDefs}\r\n                    rowData={foodData}\r\n                    floatingFilter={true}\r\n                    rowSelection='multiple'\r\n                    onSelectionChanged={onSelectionChanged}\r\n\r\n                />\r\n            </div>\r\n            <OrderSummary\r\n                summaryData = {summaryData}\r\n            />\r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { BurgerMenu } from './BurgerMenu';\nimport { mainTitle, orderNowTitle } from './shared';\nimport './App.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = () => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"title\">\n        <h1>{mainTitle}</h1>\n        <h3>{orderNowTitle}</h3>\n      </div>\n        <BurgerMenu />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}